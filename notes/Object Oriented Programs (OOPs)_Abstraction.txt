class  - encapsulating all the data into one place

//what is on the menu does not reflect what is in the kitchen

// 2 instances of the Person object
var p1 = new Person("Sarah", "Lord", new DateOnly(1979,6,30));
var p2 = new Person("Brian", "Lord, new DateOnly(1977,9,10));

// 1 declaration of the Person object
public class Person
{
    //constructor
    public Person(string first, string last, string DateOnly bd)
    {
        firstname = first;
        lastname = last;
        birthday = bd;
    }
        
    private string firstname;

    private string lastname;

    private DateOnly birthday;
}



UPDATED WAY OF DOING THIS
class Person

var p1 = new Person("Sarah", "Lord", new DateOnly(1979,6,30));
var p2 = new Person("Brian", "Lord, new DateOnly(1977,9,10));

List<Person> people = [p1, p2];

Console.WriteLine(people.Count); //tells us how many people we have in the list

public class Person(string firstname, string lastname, DateOnly birthday)
{
    public string First { get; } = firstname; //can also have {get; set;}, but don't want to use set in this instance
    public string Last { get; } = lastname;
    public DateOnly Birthday { get; } = birthday;
}


************ABSTRACTION - ADD PETS TO PERSON CLASS******************

var p1 = new Person("Sarah", "Lord", new DateOnly(1979,6,30));
var p2 = new Person("Brian", "Lord, new DateOnly(1977,9,10));

p1.Pets.Add(new Dog("Fozzie"));
p1.Pets.Add(new Dog("Mystique"));

p2.Pets.Add(new Cat("Phoenix));

List<Person> people = [p1, p2];

foreach(var person in people)
{
    Console.WriteLine($"{person}:);

    foreach(var pet in person.Pets)
    {
        Console.WriteLine($"      {pet});
    }
}

public class Person(string firstname, string lastname, DateOnly birthday)
{
    public string First { get; } = firstname; //can also have {get; set;}, but don't want to use set in this instance
    pu  blic string Last { get; } = lastname;
    public DateOnly Birthday { get; } = birthday;
    public List<Pet> Pets { get; } = new();

    public override string ToString()
    {
        return $"Human {First} {Last}"
    }
}

public abstract class Pet(string firstname)
{
    public string First { get; } = firstname;
    public  abstract string MakeNoise();

    public override string ToString()
    {
        return $"{First} and I am a {GetType().Name} and I {MakeNoise()}";
    }
}

public class Cat(string firstname) : Pet(firstname)
{
    public override MakeNoise() => "meow";
}

public class Dog(string firstname) : Pet(firstname)
{
    public override MakeNoise() => "ruff";
}
